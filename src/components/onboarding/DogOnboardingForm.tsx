
// This file has been refactored into smaller components
import React, { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Form } from "@/components/ui/form";
import { toast } from "sonner";
import { Dog } from "@/types";

// Import the refactored components
import BasicDetailsStep from "./dog-profile/BasicDetailsStep";
import DietDigestionStep from "./dog-profile/DietDigestionStep";
import PersonalityStoryStep from "./dog-profile/PersonalityStoryStep";
import ConfettiAnimation from "./dog-profile/ConfettiAnimation";
import FormNavigation from "./dog-profile/FormNavigation";
import { dogSchema, DogFormValues, DogOnboardingFormProps } from "./dog-profile/types";

const DogOnboardingForm: React.FC<DogOnboardingFormProps> = ({
  initialValues = {},
  onSubmit,
  onCancel
}) => {
  const [currentStep, setCurrentStep] = useState(1);
  const [profilePhoto, setProfilePhoto] = useState<string | null>(initialValues.imageUrl || null);
  const [showConfetti, setShowConfetti] = useState(false);

  // Initialize the form with default or provided values
  const form = useForm<DogFormValues>({
    resolver: zodResolver(dogSchema),
    defaultValues: {
      name: initialValues.name || "",
      breed: initialValues.breed || "",
      age: initialValues.age || 0,
      weight: initialValues.weight || 0,
      imageUrl: initialValues.imageUrl || "",
      foodSensitivity: initialValues.foodSensitivity || "none",
      digestiveIssues: initialValues.digestiveIssues || [],
      poopFrequency: initialValues.poopFrequency || "2-3",
      digestiveHealth: initialValues.digestiveHealth || "normal",
      dietType: initialValues.dietType || "kibble",
      personalityTraits: initialValues.personalityTraits || [],
      favoriteTreats: initialValues.favoriteTreats || "",
      birthdate: initialValues.birthdate || "",
      microchipped: initialValues.microchipped || false,
      adoptionStory: initialValues.adoptionStory || "",
    },
  });

  const handleSubmitForm = () => {
    const values = form.getValues();
    
    // Show confetti animation on submission
    setShowConfetti(true);
    setTimeout(() => setShowConfetti(false), 3000);
    
    // Convert the form values to a Dog object
    const dog: Dog = {
      id: initialValues.id || "temp-id", // In a real app, this would be generated by the backend
      name: values.name,
      breed: values.breed,
      age: values.age,
      weight: values.weight,
      imageUrl: profilePhoto || values.imageUrl,
      // Additional fields stored in the Dog object
      dietType: values.dietType,
      digestiveHealth: values.digestiveHealth,
      poopFrequency: values.poopFrequency,
      foodSensitivity: values.foodSensitivity,
      digestiveIssues: values.digestiveIssues,
      personalityTraits: values.personalityTraits,
      favoriteTreats: values.favoriteTreats,
      birthdate: values.birthdate,
      microchipped: values.microchipped,
      adoptionStory: values.adoptionStory,
    };
    
    // Show toast with dog name
    toast.success(`${values.name} has been added to your pack! 🐾`, {
      description: "Your dog's profile has been created successfully!"
    });
    
    onSubmit(dog);
  };

  const handleNext = () => {
    // Validate current step
    if (currentStep === 1) {
      const basicDetails = form.getValues();
      if (!basicDetails.name || !basicDetails.breed || !basicDetails.age || !basicDetails.weight) {
        toast.error("Please fill in all required fields", {
          description: "Name, breed, age, and weight are required"
        });
        return;
      }
    }
    
    setCurrentStep(currentStep + 1);
  };

  const handlePrevious = () => {
    setCurrentStep(currentStep - 1);
  };

  const handleProfilePhotoUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        if (e.target?.result) {
          setProfilePhoto(e.target.result.toString());
          form.setValue("imageUrl", URL.createObjectURL(file));
          
          // Show achievement toast
          toast.success("Achievement Unlocked: Paw-trait Artist! 🎨", {
            description: "You've added a profile photo of your dog!"
          });
        }
      };
      reader.readAsDataURL(file);
    }
  };

  // Render the current step
  const renderStep = () => {
    switch (currentStep) {
      case 1:
        return (
          <BasicDetailsStep 
            form={form} 
            profilePhoto={profilePhoto} 
            onPhotoUpload={handleProfilePhotoUpload} 
          />
        );
      case 2:
        return <DietDigestionStep form={form} />;
      case 3:
        return <PersonalityStoryStep form={form} />;
      default:
        return null;
    }
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(handleSubmitForm)} className="space-y-6">
        <ConfettiAnimation show={showConfetti} />
        
        {renderStep()}
        
        <FormNavigation 
          currentStep={currentStep}
          onPrevious={handlePrevious}
          onNext={handleNext}
          onCancel={onCancel}
          onSubmit={handleSubmitForm}
          isLastStep={currentStep === 3}
        />
      </form>
    </Form>
  );
};

export default DogOnboardingForm;
