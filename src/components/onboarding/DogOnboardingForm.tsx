
import React, { useState } from "react";
import { z } from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Dog } from "@/types";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Dog as DogIcon, Save, X } from "lucide-react";

// Define the form schema
const dogSchema = z.object({
  name: z.string().min(1, { message: "Dog name is required" }),
  breed: z.string().min(1, { message: "Breed is required" }),
  age: z.coerce.number().min(0, { message: "Age must be a positive number" }),
  weight: z.coerce.number().min(0, { message: "Weight must be a positive number" }),
  imageUrl: z.string().optional(),
  foodSensitivity: z.string().optional(),
  digestiveIssues: z.array(z.string()).optional(),
  poopFrequency: z.string().optional(),
  digestiveHealth: z.string().optional(),
  dietType: z.string().optional(),
});

type DogFormValues = z.infer<typeof dogSchema>;

interface DogOnboardingFormProps {
  initialValues?: Partial<Dog>;
  onSubmit: (dog: Dog) => void;
  onCancel: () => void;
}

const DogOnboardingForm: React.FC<DogOnboardingFormProps> = ({
  initialValues = {},
  onSubmit,
  onCancel
}) => {
  // Initialize the form with default or provided values
  const form = useForm<DogFormValues>({
    resolver: zodResolver(dogSchema),
    defaultValues: {
      name: initialValues.name || "",
      breed: initialValues.breed || "",
      age: initialValues.age || 0,
      weight: initialValues.weight || 0,
      imageUrl: initialValues.imageUrl || "",
      foodSensitivity: "none",
      digestiveIssues: [],
      poopFrequency: "2-3",
      digestiveHealth: "normal",
      dietType: "kibble",
    },
  });

  const handleSubmit = (values: DogFormValues) => {
    // Convert the form values to a Dog object
    const dog: Dog = {
      id: initialValues.id || "temp-id", // In a real app, this would be generated by the backend
      name: values.name,
      breed: values.breed,
      age: values.age,
      weight: values.weight,
      imageUrl: values.imageUrl,
    };
    
    onSubmit(dog);
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(handleSubmit)} className="space-y-6">
        <div className="flex justify-center mb-6">
          <div className="w-24 h-24 rounded-full bg-primary/10 flex items-center justify-center border-4 border-primary/20">
            <DogIcon className="h-12 w-12 text-primary/40" />
          </div>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <FormField
            control={form.control}
            name="name"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Dog's Name</FormLabel>
                <FormControl>
                  <Input placeholder="Buddy" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          
          <FormField
            control={form.control}
            name="breed"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Breed</FormLabel>
                <FormControl>
                  <Input placeholder="Labrador Retriever" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <FormField
            control={form.control}
            name="age"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Age (years)</FormLabel>
                <FormControl>
                  <Input type="number" min={0} step={0.5} {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          
          <FormField
            control={form.control}
            name="weight"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Weight (lbs)</FormLabel>
                <FormControl>
                  <Input type="number" min={0} step={0.5} {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>

        <FormField
          control={form.control}
          name="dietType"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Primary Diet</FormLabel>
              <Select onValueChange={field.onChange} defaultValue={field.value}>
                <FormControl>
                  <SelectTrigger>
                    <SelectValue placeholder="Select a diet type" />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  <SelectItem value="kibble">Dry Kibble</SelectItem>
                  <SelectItem value="wet">Wet Food</SelectItem>
                  <SelectItem value="raw">Raw Diet</SelectItem>
                  <SelectItem value="homemade">Homemade</SelectItem>
                  <SelectItem value="mixed">Mixed Diet</SelectItem>
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="poopFrequency"
          render={({ field }) => (
            <FormItem>
              <FormLabel>How many times does your dog poop per day?</FormLabel>
              <Select onValueChange={field.onChange} defaultValue={field.value}>
                <FormControl>
                  <SelectTrigger>
                    <SelectValue placeholder="Select frequency" />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  <SelectItem value="1">Once daily</SelectItem>
                  <SelectItem value="2-3">2-3 times daily</SelectItem>
                  <SelectItem value="4+">4+ times daily</SelectItem>
                  <SelectItem value="irregular">Irregular</SelectItem>
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="digestiveHealth"
          render={({ field }) => (
            <FormItem className="space-y-3">
              <FormLabel>Current Digestive Health</FormLabel>
              <FormControl>
                <RadioGroup
                  onValueChange={field.onChange}
                  defaultValue={field.value}
                  className="flex flex-col space-y-1"
                >
                  <div className="flex items-center space-x-2 rounded-md border p-3">
                    <RadioGroupItem value="excellent" id="excellent" />
                    <label htmlFor="excellent" className="flex flex-col">
                      <span className="font-medium">Excellent</span>
                      <span className="text-sm text-gray-500">No digestive issues at all</span>
                    </label>
                  </div>
                  <div className="flex items-center space-x-2 rounded-md border p-3">
                    <RadioGroupItem value="normal" id="normal" />
                    <label htmlFor="normal" className="flex flex-col">
                      <span className="font-medium">Normal</span>
                      <span className="text-sm text-gray-500">Occasional minor issues</span>
                    </label>
                  </div>
                  <div className="flex items-center space-x-2 rounded-md border p-3">
                    <RadioGroupItem value="concerns" id="concerns" />
                    <label htmlFor="concerns" className="flex flex-col">
                      <span className="font-medium">Some Concerns</span>
                      <span className="text-sm text-gray-500">Regular but manageable issues</span>
                    </label>
                  </div>
                  <div className="flex items-center space-x-2 rounded-md border p-3">
                    <RadioGroupItem value="issues" id="issues" />
                    <label htmlFor="issues" className="flex flex-col">
                      <span className="font-medium">Serious Issues</span>
                      <span className="text-sm text-gray-500">Frequent digestive problems</span>
                    </label>
                  </div>
                </RadioGroup>
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <div className="pt-6 flex justify-between">
          <Button type="button" variant="outline" onClick={onCancel}>
            <X className="h-4 w-4 mr-2" />
            Cancel
          </Button>
          <Button type="submit">
            <Save className="h-4 w-4 mr-2" />
            Save Dog Profile
          </Button>
        </div>
      </form>
    </Form>
  );
};

export default DogOnboardingForm;
